@inject ICategoryService CategoryService
@inject IProductService ProductService 
@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlazorShop</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<BlazoredTypeahead SearchMethod="@SearchProduct"
                   TValue="Product"
                   TItem="Product"
                   Value="selectedProduct"
                   ValueChanged="HandleSearch"
                   ValueExpression="(()=>selectedProduct)"
                   placeholder="Search...">
    <SelectedTemplate>
        @context.Title
    </SelectedTemplate>
    <ResultTemplate>
        @context.Title
    </ResultTemplate>
    <NotFoundTemplate>
        Sorry, there is no item with the searched name!
    </NotFoundTemplate>
</BlazoredTypeahead>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="dropdown-divider"></div>
        @foreach(var category in CategoryService.Categories)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="@category.Url">
                    <span class="oi oi-@category.Icon" aria-hidden="true"></span> @category.Name
                </NavLink>
            </div>
        }
       
       
    </nav>
</div>

@code {
    private Product selectedProduct;
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    protected override async Task OnInitializedAsync()
    {
        await CategoryService.LoadCategories();
    }
    private void HandleSearch(Product product)
    {
        if (product == null)
        {
            return;
        }
        selectedProduct = product;
        var url = $"product/{selectedProduct.Id}";
        NavigationManager.NavigateTo(url);
    }
    private async Task<IEnumerable<Product>> SearchProduct(string searchText)
    {
        var response = await ProductService.SearchProduct(searchText);
        return response;
    }
  
}
